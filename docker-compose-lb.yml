version: "3.9"

services:
  postgresDB:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=simple_bank
    ports:
      - "5432:5432"
    volumes:
      - data-volume:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U root -d simple_bank" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"

  # Define the common configuration for api services
  api-base: &api-base
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
      - "50051:50051"
    environment:
      - DB_URI=postgresql://root:secret@postgresDB:5432/simple_bank?sslmode=disable
      - HTTP_SERVER_ADDRESS=:8080
      - GRPC_SERVER_ADDRESS=:50051
      # - REDIS_ADDRESS=redis:6379
    depends_on:
      - postgresDB
      # - redis
      # Overwriting the default entrypoint and command in the Dockerfile
      # so that it will wait for the postgres service to be ready before starting
      # the api service.
    entrypoint:
      [
        "/app/wait-for.sh",
        "postgresDB:5432",
        "--",
        "/app/run_migrations.sh"
      ]
    # Overwriting the entrypoint in the docker compose file causes the CMD in the
    # Dockerfile to be ignored. So we need to specify the command here.
    command: [ "/app/main" ] # this will override the CMD in the Dockerfile (for production)

  # Define individual api services
  api1:
    <<: *api-base
    ports:
      - "8081:8081"
      - "50052:50052"
    environment:
      - DB_URI=postgresql://root:secret@postgresDB:5432/simple_bank?sslmode=disable
      - HTTP_SERVER_ADDRESS=:8081
      - GRPC_SERVER_ADDRESS=:50052

  api2:
    <<: *api-base
    ports:
      - "8082:8082"
      - "50053:50053"
    environment:
      - DB_URI=postgresql://root:secret@postgresDB:5432/simple_bank?sslmode=disable
      - HTTP_SERVER_ADDRESS=:8082
      - GRPC_SERVER_ADDRESS=:50053

  api3:
    <<: *api-base
    ports:
      - "8083:8083"
      - "50054:50054"
    environment:
      - DB_URI=postgresql://root:secret@postgresDB:5432/simple_bank?sslmode=disable
      - HTTP_SERVER_ADDRESS=:8083
      - GRPC_SERVER_ADDRESS=:50054

  api4:
    <<: *api-base
    ports:
      - "8084:8084"
      - "50055:50055"
    environment:
      - DB_URI=postgresql://root:secret@postgresDB:5432/simple_bank?sslmode=disable
      - HTTP_SERVER_ADDRESS=:8084
      - GRPC_SERVER_ADDRESS=:50055

  # nginx server
  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    restart: always
    ports:
      - "3050:80"
      - "9090:9090"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api1
      - api2
      - api3
      - api4

volumes:
  data-volume:

    # All services in the docker compose file will run on the same network
    # and thus can communicate with each other using the service name
    # and container name instead of the IP address.
